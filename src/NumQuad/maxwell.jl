

using Formatting: printfmt
using LinearAlgebra

# Adapted from supplementary routines for the book
# "Spectral methods in Chemistry and Physics"

function maxwellαβ(N,kind=0)
  @assert 0 <= kind
  f(r)  = r^kind * exp(-r^2)
  α, β, h  = discrete_stieltjes(f,N)
end

function maxwellpts(N,kind=0)
  @assert 0 <= kind
  f(r)  = r^kind * exp(-r^2)
  α, β, h  = discrete_stieltjes(f,N)
  λ, wt = golub_welsch(α,β,h)
end

# Discrete Stieltjes algorithm for the calculation of recurrence coefficients
# αₖ and βₖ for weight function ω(r) = f(r)
# Sections 2.1-2.2 in 10.1137/0903018
# πₖ₊₁ (r) = (r-αₖ)πₖ(r) - βₖπₖ₋₁(r);   π₋₁(r) = 0,  π₀(r) = 1
#
#      ∫ r πₖ²(r) dλ(r)     s2
# αₖ = ----------------- ≈  --.        k = 0,1,2,...
#      ∫ πₖ²(r)   dλ(r)     s1
#
#      ∫ πₖ²(r)   dλ(r)     h[k]
# βₖ = ----------------- ≈ --------,   k = 1,2,3,...; β₀ = ∫ dλ(r)
#      ∫ πₖ₋₁²(r) dλ(r)     h[k-1]
#
# Discretization => dλ(r) = ω(r) dr on (rmin,rmax)
function discrete_stieltjes(f,N,rmin=0,rmax=30,nintervals=200,npts=200)
  #nintervals: #of intervals; npts: # of points per interval [rmin,rmax]
  #rmin = 0
  #rmax = 30
  #npts = 200
  #nintervals = 200
  ntot = nintervals*npts
  @assert ntot/N > 50
  # a suitable quadrature rule on (rmin,rmax)
  pwmd = multidomain_quadrature(nintervals,npts,rmin,rmax)
  # multi-domain matrix of nodes p and weights w
  p = pwmd[:,1]
  w = pwmd[:,2]
  ω = f.(p)
  #
  P0 = ones(ntot) # π₋₁(r) = 0
  h  = zeros(N)
  α  = zeros(N)
  β  = zeros(N)
  # First two integrals; (2.4) in 10.1137/0903018
  s1 = sum(w .*       ω)  # here, π₀(r) = 1
  s2 = sum(w .* (p .* ω)) # " " "
  k = 1
  h[k] = s1
  α[k] = s2/s1
  β[k] = 0 # β₀ = ∫ dλ(r)
  # Norm and α₁ and β₁
  #println("Norm: ", h[k])
  #println(α[k], " ", β[k])
  # Polynomial π₁(r) = (r-α₀)1
  P1 = p .- α[k]
  # Next two integrals
  s1 = sum(w .*       (ω .* (P1.^2)))
  s2 = sum(w .* (p .* (ω .* (P1.^2))))
  if N > 1
    k = 2
    h[k] = s1
    α[k] = s2/s1
    β[k] = h[k]/h[k-1]
  end
  if N > 2
    # Norm and α₂ and β₂
    #println("Norm: ", h[k])
    #println(α[k], " ", β[k])
    for k in 3:N
      Pma = @. p - α[k-1]
      # Recurrence for the next polynomial
      P2 = @. Pma * P1 - β[k-1]*P0
      s1 = sum(w .*       (ω .* (P2.^2)))
      s2 = sum(w .* (p .* (ω .* (P2.^2))))
      α[k] = s2/s1
      h[k] = s1
      β[k] = h[k]/h[k-1]
      #println(α[k], " ", β[k])
      P0 = P1
      P1 = P2
    end
  end
  α, β, h[1]
end

function golub_welsch(α,β,h)
  # Calculate the quadrature points and weights with Golub-Welsch
  rtb = sqrt.(β[2:length(α)])
  J = SymTridiagonal(α,rtb) # Jacobi matrix
  λ, f = eigen(J)
  wt = h * f[1,:].^2
  λ, wt
end

# Build a composite quadrature; the rule for each interval
# should not include the endpoints to avoid duplication.
function multidomain_quadrature(nintervals,npts,rmin,rmax)
  ntot = nintervals * npts
  dr = (rmax-rmin)/ntot
  pwmd = Array{Float64,2}(undef,npts,2)
  for i in 1:nintervals
    a = rmin + (i-1)*npts*dr
    b = a + npts*dr
    pw = fejer2(a,b,npts)
    if i == 1
      pwmd = pw
    else
      pwmd = vcat(pwmd,pw)
    end
  end
  sum(pwmd[:,2]) ≈ (rmax-rmin) || error("Weights do not sum up to $(rmax-rmin)")
  pwmd
end

# Fejer quadrature rule
# Nodes of Tₙ (1st kind Chebyshev polynomials)
function fejer2(a,b,N)
  n = N:-1:1
  m = 1:floor(Int,N/2)
  θ = @. (n-0.5)*π / N
  p = cos.(vec(θ))
  w = zeros(N)
  for k in N:-1:1
    s = sum(@. cos(2m*θ[k])/(4(m^2)-1))
    w[k] = 2(1-2s)/N
  end
  # p ∈ [-1,1] -> ps ∈ [a,b]
  r1 = (b-a)/2
  r2 = (a+b)/2
  ps = @. r1*p + r2
  ws = r1*w
  sum(ws) ≈ (b-a) || error("Weights do not sum up to $(b-a)")
  [ps vec(ws)]
end

function test_maxwell_p0()
  correct_αβ = BigFloat[#ORTHPOL->http://spectralmethods.sites.olt.ubc.ca/files/2014/09/abhrhermite.pdf
   0.5641895835477562869480794e+00 0.0000000000000000000000000e+00;#fixed w = 1 -> 0
   0.9884253928468002854870634e+00 0.1816901138162093284622325e+00;
   0.1285967619363939960282789e+01 0.3413251289594391985641718e+00;
   0.1524720844080115303513002e+01 0.5049621529880016319357511e+00;
   0.1730192274309439256771561e+01 0.6702641946396190856785084e+00;
   0.1913499843143102570718675e+01 0.8361704992803110155488235e+00;
   0.2080620336400833224817622e+01 0.1002347851011010842224538e+01;
   0.2235228380504639149658317e+01 0.1168671164744272743814785e+01;
   0.2379782443504637420940535e+01 0.1335082922242335357979878e+01;
   0.2516025643443866409763418e+01 0.1501552599344761843895291e+01;
   0.2645247925056953180326172e+01 0.1668062362188116168845481e+01;
   0.2768435953504255906913274e+01 0.1834601052793767641991360e+01;
   0.2886364594032694569270867e+01 0.2001161318551213784331710e+01;
   0.2999655653353603538690627e+01 0.2167738111763264485348196e+01;
   0.3108817175924920151692696e+01 0.2334327849540501398018482e+01;
   0.3214270636071128227448914e+01 0.2500927917133702669954321e+01;
   0.3316370297083087365920816e+01 0.2667536360957202088281074e+01;
   0.3415417332413338944536869e+01 0.2834151691667832757920496e+01;
   0.3511670344615629515405105e+01 0.3000772753782719027585036e+01;
   0.3605353345905566430295482e+01 0.3167398636964426811757567e+01;
   0.3696661911504590799968594e+01 0.3334028614203110245251329e+01;
   0.3785767992700224948494605e+01 0.3500662097828114651724216e+01;
   0.3872823730185221489539236e+01 0.3667298607618394889364017e+01;
   0.3957964510422999291702203e+01 0.3833937747295831850614677e+01;
   0.4041311441034391638446867e+01 0.4000579186936195680581479e+01;
   0.4122973374779628183603027e+01 0.4167222649628333194557220e+01;
   0.4203048578872001952660277e+01 0.4333867901229950443604430e+01;
   0.4281626122768203585210086e+01 0.4500514742412094337351180e+01;
   0.4358787040389888852503068e+01 0.4667163002416825703159569e+01;
   0.4434605310041297172735927e+01 0.4833812534112327742026727e+01;
   0.4509148685807793333274300e+01 0.5000463210041202834966111e+01;
   0.4582479407059626769460533e+01 0.5167114919236647446410207e+01;
   0.4654654807220995103425026e+01 0.5333767564637804018268582e+01;
   0.4725727838755017221054501e+01 0.5500421060976676891721065e+01;
   0.4795747528043545327295810e+01 0.5667075333039157064295568e+01;
   0.4864759371276861258445860e+01 0.5833730314225067360232878e+01;
   0.4932805680443494860289873e+01 0.6000385945348890195707763e+01;
   0.4999925886899688131436246e+01 0.6167042173635499472318163e+01;
   0.5066156808707957816332692e+01 0.6333698951874867575482285e+01;
   0.5131532886894296519319692e+01 0.6500356237707132938035155e+01;
   0.5196086394930197250773717e+01 0.6667013993015154067716410e+01;
   0.5259847625057810511834149e+01 0.6833672183406152138455293e+01;
   0.5322845054512434683688314e+01 0.7000330777767558269799598e+01;
   0.5385105494231548472925797e+01 0.7166989747884957970801027e+01;
   0.5446654222254430025657657e+01 0.7333649068112232085785313e+01;
   0.5507515103695884550910455e+01 0.7500308715085757883246261e+01;
   0.5567710698909693136903262e+01 0.7666968667475952159102074e+01;
   0.5627262361232520193968768e+01 0.7833628905770584215603443e+01;
   0.5686190325509504723333244e+01 0.8000289412085217191956754e+01;
   0.5744513788442437519909012e+01 0.8166950169996895526065068e+01;
   0.5802250981665299173527327e+01 0.8333611164397818662847495e+01;
   0.5859419238335944996098651e+01 0.8500272381366253411195036e+01;
   0.5916035053933561212473938e+01 0.8666933808052360798591561e+01;
   0.5972114141866467479491937e+01 0.8833595432576964677302910e+01;
   0.6027671484421669937238271e+01 0.9000257243941582066965469e+01;
   0.6082721379524430538745031e+01 0.9166919231948279964154343e+01;
   0.6137277483721481249944657e+01 0.9333581387128128694920850e+01;
   0.6191352851754101338743448e+01 0.9500243700677194756174537e+01;
   0.6244959973046027733116931e+01 0.9666906164399162095112468e+01;
   0.6298110805395189999936028e+01 0.9833568770653794473959094e+01;
   0.6350816806126802565243862e+01 0.1000023151231055668363463e+02;
   0.6403088960937774489328982e+01 0.1016689438270680195556003e+02;
   0.6454937810638176003534970e+01 0.1033355737561000948437645e+02;
   0.6506373475974176816695232e+01 0.1050022048518362158591114e+02;
   0.6557405680698057368191941e+01 0.1066688370595608638792824e+02;
   0.6608043773034260960238525e+01 0.1083354703279276050928911e+02;
   0.6658296745675719948247638e+01 0.1100021046087036811178733e+02;
   0.6708173254431610987734936e+01 0.1116687398565374899885844e+02;
   0.6757681635636064758363397e+01 0.1133353760287465991684323e+02;
   0.6806829922416995397669847e+01 0.1150020130851242058522612e+02;
   0.6855625859914969291507612e+01 0.1166686509877621983020918e+02;
   0.6904076919533767895967112e+01 0.1183352897008891801785267e+02;
   0.6952190312296898669330683e+01 0.1200019291907220019956296e+02;
   0.6999973001377670923524516e+01 0.1216685694253295035121597e+02;
   0.7047431713864491437971285e+01 0.1233352103745073111177269e+02;
   0.7094572951817671183814445e+01 0.1250018520096626576732835e+02;
   0.7141403002669202293362877e+01 0.1266684943037083010399883e+02;
   0.7187927949012604609774931e+01 0.1283351372309647135801947e+02;
   0.7234153677826002093795570e+01 0.1300017807670697998720543e+02;
   0.7280085889168025612817584e+01 0.1316684248888954751503046e+02;
   0.7325730104382910172803115e+01 0.1333350695744705037821356e+02;
   0.7371091673848226166403563e+01 0.1350017148029090564557659e+02;
   0.7416175784296024496911902e+01 0.1366683605543444976070789e+02;
   0.7460987465735756877476088e+01 0.1383350068098679617226683e+02;
   0.7505531598005130712775293e+01 0.1400016535514713192191856e+02;
   0.7549812916973051006527912e+01 0.1416683007619941702037097e+02;
   0.7593836020416970372713943e+01 0.1433349484250745380865973e+02;
   0.7637605373595295248957772e+01 0.1450015965251029651999048e+02;
   0.7681125314533966469062460e+01 0.1466682450471797396673262e+02;
   0.7724400059044931743714882e+01 0.1483348939770750071229654e+02;
   0.7767433705492944070595994e+01 0.1500015433011915427909702e+02;
   0.7810230239325942677454860e+01 0.1516681930065299791840555e+02;
   0.7852793537383191960367152e+01 0.1533348430806563024921106e+02;
   0.7895127371994360188238403e+01 0.1550014935116714468203904e+02;
   0.7937235414881805572184294e+01 0.1566681442881828299838475e+02;
   0.7979121240877495508803024e+01 0.1583347953992776877323025e+02;
   0.8020788331465208971880101e+01 0.1600014468344980752141011e+02;
   0.8062240078157956351423629e+01 0.1616680985838174153110864e+02;
   0.8103479785719890289323725e+01 0.1633347506376184833082194e+02;
   0.8144510675241370508142739e+01 0.1650014029866727262975461e+02;
  ]
  eps = 1e-12
  α,β = maxwellαβ(size(correct_αβ,1))
  for i in 1:size(correct_αβ,1)
    @assert isapprox(α[i],correct_αβ[i,1],atol=eps)
    @assert isapprox(β[i],correct_αβ[i,2],atol=eps)
  end
end
